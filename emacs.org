 # <html -*- mode: org ; coding: utf-8-with-signature -*- >
 # <script src="js/org-render.js"></script><body><!--
 # This renders this org-file directly to html in certain conditions,
 # see for details: https://github.com/AlexStragies/ORGJS-Wrapper

#+Title: The Emacs Config in Org-Mode
#+Author: Alex Stragies
#+LINK: wikipedia    https://en.wikipedia.org/wiki/
#+LINK: firewall     http://langw/
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/org-view.css" />
#+PROPERTY: header-args:emacs-lisp :noweb yes
#+PROPERTY: header-args:awk  :tangle no :results code
#+PROPERTY: header-args:awk+ :wrap SRC emacs-lisp
#+options: toc:t

.. and a small loader in init.el
* Overview

This configuration is centered around the following topics:
- ORG mode for multilingual text authoring and documentation
- EVIL mode for support of the VI text manipulation grammar.
- GraphViz support optimized for editing/viewing/presenting
- Literate Devops

** Installation                                                 :INSTALL:GIT:

Git clone command:
#+NAME: INSTALL-COMMAND-GIT
#+BEGIN_SRC shell :var TARGETDIR="~/.emacs.d" :tangle no
: "${TARGETDIR:=$HOME/.emacs.d}";
[ -e "$TARGETDIR" ] && mv $TARGETDIR $TARGETDIR_BACKUP;
git clone --recurse-submodules -j8 https://github.com/AlexStragies/EmacsConfig $TARGETDIR
#+END_SRC

This leaves `column-marker` still to be downloaded on first run. The following code block should automatically take care of that.

#+NAME: SCRIPT-DOWNLOAD-COLUMN-MARKER
#+BEGIN_SRC emacs-lisp
(let ((url-base "https://raw.githubusercontent.com/emacsmirror/column-marker/refs/heads/master/")
      (dest-dir "contrib/column-marker/")                  ; Directory to save the file
      (filename "column-marker.el"))                       ; File name
  (let* ((url (concat url-base filename))                  ; Full URL
         (target-file (expand-file-name filename dest-dir)) ; Full path to the target file
         (symlink-file (expand-file-name filename "contrib/"))) ; Path for the symlink
    ;; Ensure the target directory exists
    (make-directory (file-name-directory target-file) t)
    ;; Check if the target file exists
    (if (file-exists-p target-file)
        (message "File already exists: %s" target-file)
      (progn
        (url-copy-file url target-file t)
        (message "File downloaded to: %s" target-file)))
    ;; Create a symbolic link in the parent directory
    (if (file-exists-p symlink-file)
        (message "Symlink already exists: %s" symlink-file)
      (progn
        (make-symbolic-link target-file symlink-file t)
        (message "Symlink created: %s -> %s" symlink-file target-file)))))
#+END_SRC

*** Components
**** init.el - The initial loader
- Has configuration for the packacke manager
- Version & existence check for org-mode
- Loads main configuration [[https://github.com/AlexStragies/EmacsConfig/blob/master/emacs.org][emacs.org]]

**** emacs.org - Main File
- [[https://github.com/AlexStragies/EmacsConfig/blob/master/emacs.org][emacs.org]] - The hybrid org/html configuration file, click [[https://raw.githubusercontent.com/AlexStragies/EmacsConfig/refs/heads/master/emacs.org][here for raw ORG source]].

**** Sub-Module Repos
- [[https://github.com/AlexStragies/MultiLangWritingAbbrevs.git][Multi Language Writing Abbreviations]] : Abbrev lists for the lazy quick typist
- [[https://github.com/AlexStragies/library-of-babel.git][My Library of Babel]] - A small collection of functions
- [[https://github.com/AlexStragies/MyYASnippets.git][My YASnippets]] - Public snippets mostly org mode and graphviz stuff at this point

* Using this settings file and emacs
:PROPERTIES:
:CUSTOM_ID: Usage
:END:

As mentioned in the Overview, this configuration is centered around usage of EVIL and ORG. Keep especially the former in mind, if you look up other Emacs ressources.

When editing the configuration tables below, keep in mind, that some tables require a PostProcessing function to be called after modification.
For the others, settings should apply automatically after restart of emacs

** Some useful default Keys                                            :Keys:
#+NAME: Table_Useful_Keys
| KeyCombo      | KeyMap | Meaning                                        |
|---------------+--------+------------------------------------------------|
| *C-u C-c C-q* |        | Realign all tags                               |
| *C-c C-c*     | org    | Execute function at point, reformat table      |
| *M-Enter*     |        | create new heading at same indent level        |
| *M-ArrowKey*  |        | promote/demote/raise/lower current heading     |
| *C-c C-l*     |        | Create/Edit org mode link                      |
| *C-c C-x*     | org    | Toggle display of entities as UTF-8 characters |
| *C-c /*       | org    | org-sparse-display                             |
| *C-c / m*     | org    | org-sparse-display match by Tag                |
| *M-S-↑→↓←*    | org    | in TableEditor: Remove/add Columns/Lines       |
|               |        |                                                |
*** TODO Add some more keyboard shortcuts in the usage hint section
** Custom keyboard settings

The following table contains the definition of the leader key:

#+NAME: Table-Leader-Key
| leader | ace-jump |
|--------+----------|
| ð      | æ        |

Change to a key easily reachable, and as of yet unused.

** Tool functions                                                     :Tools:
Nomenclature proposal:
- xxx-xxx-xxx :: callable functions
- Xxx-Xxx-XXX :: Tables

*** Color Picker                                                     :Colors:

#+NAME: My-Insert-Color-Hex
#+BEGIN_SRC emacs-lisp
(defun my-insert-color-hex ()
  "Select a color and insert its hexadecimal format."
  (interactive "*")
  (let ((buf (current-buffer)))
    (list-colors-display
     nil nil `(lambda (name)
                (interactive)
                (quit-window)
                (with-current-buffer ,buf
                  (insert (apply 'color-rgb-to-hex
                                 (color-name-to-rgb name))))))))
#+END_SRC

*** delete-file-visited-by-buffer and delete-file-and-buffer
#+BEGIN_SRC emacs-lisp
(defun delete-file-and-buffer ()
  "Kill the current buffer and deletes the file it is visiting."
  (interactive)
  (let ((filename (buffer-file-name)))
    (if filename
        (if (y-or-n-p (concat "Do you really want to delete file " filename " ?"))
            (progn
              (delete-file filename)
              (message "Deleted file %s." filename)
              (kill-buffer)))
            (message "Not a file visiting buffer!"))))

(defun delete-file-visited-by-buffer (buffername)
  "Delete the file visited by the buffer named BUFFERNAME."
  (interactive "b")
  (let* ((buffer (get-buffer buffername))
         (filename (buffer-file-name buffer)))
    (when filename
      (delete-file filename)
      (kill-buffer-ask buffer))))
#+END_SRC

**** TODO Where do I use this function?

*** Add Header to tables
#+NAME: add-header-line
#+BEGIN_SRC emacs-lisp :var tbl="" :tangle no
(cons (car tbl) (cons 'hline (cdr tbl)))
#+END_SRC
* Emacs Configuration
** Basic User Interface Settings
*** Hide the Menu-Bar by default                                    :MenuBar:
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
#+END_SRC

*** Hide the Tool-Bar by default                                    :ToolBar:
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
#+END_SRC

*** Line and Column numbers
#+NAME: SETUP-UI-LINE-NUMS-AND-COLUMN-NUM
#+BEGIN_SRC emacs-lisp
(global-display-line-numbers-mode)
;; Enable line numbers by default for file buffers
(add-hook 'find-file-hook
   (lambda ()
     (when (and buffer-file-name  ;; Buffer is associated with a file
              (not (minibufferp))) ;; Exclude minibuffers
       (display-line-numbers-mode 1))))

;; Disable line numbers for specific buffer types
(add-hook 'buffer-list-update-hook
   (lambda ()
     (when (or (derived-mode-p 'completion-list-mode) ;; Completion buffers
               (string-match-p "\\*.*\\*" (buffer-name))) ;; Match *special* buffers
       (display-line-numbers-mode -1))))

(defun toggle-line-numbers-relative-absolute ()
  "Toggle `display-line-numbers` between 'relative and 'absolute."
  (interactive)
  (setq display-line-numbers
     (if (eq display-line-numbers 'relative)
         'absolute
       'relative))
  (message "Line numbers set to: %s" display-line-numbers))

(column-number-mode t) ; This should enable column numbers in the mode line
#+END_SRC

** Add `load-path` for `contrib` subdir                             :CONTRIB:
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/contrib/")
#+END_SRC

** Behaviours
*** custom-file variable

#+BEGIN_SRC emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file 'noerror)
#+END_SRC

*** Backup-Files                                                     :BACKUP:

How and where to place backups and handles for opened files, and how many version back to keep.

#+NAME: EMACS-Settings
#+BEGIN_SRC emacs-lisp
(setq backup-by-copying t      ; don't clobber symlinks
   backup-directory-alist
   '(("." . "~/.saves"))    ; don't litter my fs tree
   delete-old-versions t
   kept-new-versions 6
   kept-old-versions 2
   version-control t)       ; use versioned backups

(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
#+END_SRC

*** Electric Pairs and Paren-Mode                              :PAIRS:PARENS:
#+BEGIN_SRC emacs-lisp
(electric-pair-mode)
(show-paren-mode t) ;; enable show paren mode
(setq show-paren-style 'expression) ;; highlight whole expression
#+END_SRC

*** Global Key Bindings
#+BEGIN_SRC emacs-lisp
; C-h normally calls 'Help'. This function can be called with F1, and via M-x help
(global-set-key (kbd "C-h") 'delete-backward-char)
#+END_SRC

* Package Configurations                                           :Packages:
Most of this configuration is wrapped up in `(use-package ...)` statements. To enable use of chords, this needs to be enabled:

#+NAME: USE-PACKAGE-EXT-chords
#+BEGIN_SRC emacs-lisp
(use-package use-package-chords
  :ensure t
  :config (key-chord-mode 1)
  )
#+END_SRC

** Evil                                                          :EVIL:CHORD:
Evil is an *e*\xtensible *vi* *l*\ayer for [[http://www.gnu.org/software/emacs/][Emacs]]. It emulates the main features of [[http://www.vim.org/][Vim]], and provides facilities for writing custom extensions. Also see the page on [[http://emacswiki.org/emacs/Evil][EmacsWiki]].

#+NAME: USE-PACKAGE-evil
#+BEGIN_SRC emacs-lisp
;┌┐ Evil Mode: ┌────────────────────────────────────────────────────────────────
;└┴────────────┘
(use-package evil
  :ensure t
  :init
  (evil-mode 1)  ;; Enable evil-mode
  :chords (:map evil-insert-state-map
                ("jk" . evil-normal-state))
  :config

  ;; Keybindings
  (define-key evil-motion-state-map "ö" 'evil-ex)
  (define-key evil-normal-state-map (kbd "√") 'er/expand-region)
)
#+END_SRC

*** Evil-Org
#+NAME: USE-PACKAGE-evil-org
#+BEGIN_SRC emacs-lisp
(use-package evil-org
  :ensure t
  :after (org evil)
  :diminish
  :hook (org-mode . evil-org-mode) ; Automatically enable evil-org-mode in org buffers
)
#+END_SRC

*** Evil-Leader
#+NAME: USE-PACKAGE-evil-leader
#+BEGIN_SRC emacs-lisp :var leader=Table-Leader-Key[2,0]
; evil-leader, VI leader key plugin
(use-package evil-leader
  :ensure t
  :after evil
  :config
  (global-evil-leader-mode)
  (evil-leader/set-leader leader)
  (evil-leader/set-key
   "e" 'find-file
   "b" 'switch-to-buffer
   "C" 'hl-line-mode
   "c" 'my-insert-color-hex
   "h" 'helm-M-x
   "l" 'display-line-numbers-mode
   "f" 'display-fill-column-indicator-mode
   "s" 'cycle-ispell-languages
   "R" 'rainbow-delimiters-mode
   "F" 'set-abbrev-lang-to-French
   "Z" 'vimish-fold-delete
   "E" 'set-abbrev-lang-to-English
   "j" 'ace-jump-mode
   "m" 'menu-bar-mode
   "P" 'prettify-symbols-mode
   "\\" 'zin/org-tag-match-context
   "r" 'er/expand-region
   "L" 'toggle-line-numbers-relative-absolute
   "k" 'kill-buffer))
#+END_SRC

*** Vimish-Fold                                                        :FOLD:
#+NAME: USE-PACKAGE-vimish-fold
#+BEGIN_SRC emacs-lisp
(use-package vimish-fold
  :ensure t
  :bind (
    :map evil-visual-state-map
    ("SPC" . vimish-fold)
    :map evil-normal-state-map
    ("SPC" . vimish-fold-toggle)
  )
  :after evil
)
#+END_SRC

** Helm                                                          :HELM:CHORD:
#+NAME: USE-PACKAGE-helm
#+BEGIN_SRC emacs-lisp
;┌┐ Helm Mode: ┌────────────────────────────────────────────────────────────────
;└┴────────────┘
(use-package helm
  ;; The default "C-x c" is quite close to "C-x C-c", which quits Emacs.
  ;; Changed to "C-c h". Note: We must set "C-c h" globally, because we
  ;; cannot change `helm-command-prefix-key' once `helm-config' is loaded.
  :demand t
  :chords ("jk" . helm-M-x)
  :bind (
     ("œ"         . helm-M-x)
     ("C-c h o"   . helm-occur)
     ("<f1> SPC"  . helm-all-mark-rings) ; I modified the keybinding
     ("M-y"       . helm-show-kill-ring)
     ("C-c h x"   . helm-register)    ; C-x r SPC and C-x r j
     ("<menu>"    . helm-M-x)
     ("C-c h g"   . helm-google-suggest)
     ("C-c h M-:" . helm-eval-expression-with-eldoc)
     ("C-x C-f"   . helm-find-files)
  )
)
#+END_SRC

** Ace-Jump
#+NAME: USE-PACKAGE-ace-jump-mode
#+BEGIN_SRC emacs-lisp :var acejmp=Table-Leader-Key[2,1]
(use-package ace-jump-mode
  :ensure t
  :after evil
  :bind
  ("æ" . ace-jump-mode)  ;; Bind ace-jump-mode to the desired keys
  ("ï" . ace-jump-mode)
)
#+END_SRC

** Language Server Protocol                                          :JS:LSP:
This code will automatically install lsp-mode and set it up to run when opening JavaScript files:
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :ensure t
  :hook (js-mode . lsp)
  :commands lsp
  :config
  (setq lsp-prefer-flymake nil)) ;; Use flycheck for diagnostics instead of flymake:
#+END_SRC

*** LSP User Interface
To enhance the user interface with LSP, install `lsp-ui`, which provides features like documentation popups, code lenses, and more:
#+BEGIN_SRC emacs-lisp
(use-package lsp-ui
  :ensure t
  :hook (js-mode . lsp-ui-mode)
  :commands lsp-ui-mode)
#+END_SRC

** TRAMP                                                              :TRAMP:
#+NAME: USE-PACKAGE-tramp
#+BEGIN_SRC emacs-lisp
(use-package tramp
  :init
  ;; Set default connection method for TRAMP
  (setq tramp-default-method "ssh")
  :config
  (add-to-list 'tramp-default-user-alist
               '("smb" ".*\\'" "alex.stragies"))
)
#+END_SRC

** HideShow                                                    :BUILTIN:FOLD:
#+NAME: USE-PACKAGE-hideshow
#+BEGIN_SRC emacs-lisp
(use-package hideshow
  :ensure nil
  :init     (add-hook #'prog-mode-hook #'hs-minor-mode)
  :diminish hs-minor-mode
  :config   (setcdr (assoc 'js-mode hs-special-modes-alist)
                    '("[{[]" "[}\\]]" "/[*/]" nil))
  :bind     (:map evil-normal-state-map
                  ("TAB" . hs-toggle-hiding))
)
#+END_SRC

** TODO Yasnippet                                                 :yasnippet:
*** List of installed yasnippets
#+NAME: List-installed-yasnippets
#+HEADER: :tangle no :dir (concat (getenv "HOME") "/.emacs.d/")
#+HEADER: :colnames yes :post add-header-line(*this*)
#+BEGIN_SRC sh
  echo Mode Snippet
  find snippets/ -path snippets/.git -prune -o -type f  -print \
      | grep -v 'README.org' \
      | sed -e 's|snippets/||;s|/| |' | sort
#+END_SRC

#+RESULTS: List-installed-yasnippets
| Mode              | Snippet                           |
|-------------------+-----------------------------------|
| graphviz-dot-mode | edge-with-attributes-bracket      |
| graphviz-dot-mode | image-attribute                   |
| graphviz-dot-mode | invisible-point                   |
| graphviz-dot-mode | node-with-attributes              |
| graphviz-dot-mode | node-with-shape-and-label         |
| graphviz-dot-mode | shape-attribute                   |
| graphviz-dot-mode | style-invisible                   |
| graphviz-dot-mode | tooltip-attribute                 |
| graphviz-dot-mode | url-attribute                     |
| graphviz-dot-mode | url-attribute-with-injected-class |
| graphviz-dot-mode | url-attribute-with-target         |
| org-mode          | Dot-Graph-Template                |
| org-mode          | header-item                       |
| org-mode          | Insert-Org-Header-Args            |
| org-mode          | Named-Source-Code-Block           |
| org-mode          | table2                            |
| org-mode          | table3                            |

*** YASnippet options
#+NAME: YASnippet-options
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :config
  (use-package yasnippet-snippets
    :ensure t)
  (yas-global-mode t)
  (define-key yas-minor-mode-map (kbd "<tab>") nil)
  (define-key yas-minor-mode-map (kbd "C-'") #'yas-expand)
  (setq yas-triggers-in-field t))
#+END_SRC

** Wind-Move                                                :WINDOWS:BUILTIN:
#+NAME: USE-PACKAGE-windmove
#+BEGIN_SRC emacs-lisp
(use-package windmove
  ;; For readers: don't ensure means that we don't need to download it. It is built in
  :ensure nil
  :config
  (windmove-default-keybindings 'hyper)
  (setq windmove-wrap-around t)
)
#+END_SRC

** WhiteSpace                                                    :WhiteSpace:

This configuration is useful to show erronenous whitespace.

#+BEGIN_SRC emacs-lisp
(use-package whitespace
  :config
  (setq
    whitespace-style '(face tabs tab-mark trailing newline newline-mark)
    whitespace-display-mappings '(
;      (space-mark   ?\     [?\u00B7]     [?.])
;      (space-mark   ?\xA0  [?\u00A4]     [?_])
      (newline-mark ?\n    [182 ?\n])
      (tab-mark     ?\t    [?\u00BB ?\t] [?\\ ?\t])))
  (global-whitespace-mode t))
#+END_SRC

** TODO Auto-Complete                                              :COMPLETE:
#+NAME: USE-PACKAGE-auto-complete
#+BEGIN_SRC emacs-lisp
(require 'auto-complete-config)
(add-to-list 'ac-dictionary-directories "~/.emacs.d/ac-dict")
(ac-config-default)
;(global-auto-complete-mode t’)
#+END_SRC

** TODO Column-Marker                                                :VISUAL:
#+NAME: USE-PACKAGE-column-marker
#+BEGIN_SRC emacs-lisp
(use-package column-marker
  :load-path "contrib/column-marker/"
)
;;(require 'column-marker)
;;(column-marker-1 79)
;;(column-marker-2 89)
;;(column-marker-3 109)
;(column-marker-create column-marker-4 column-marker-1-face)
;(column-marker-create column-marker-5 column-marker-1-face)
;(column-marker-4 2)
;(column-marker-5 4)
;(column-marker-create column-marker-6 column-marker-1-face)
#+END_SRC

** TODO Abbrev                                             :ABBREV:Languages:
Multilingual Abbreviations & Spelling
*** Tool functions for language switching etc
#+BEGIN_SRC emacs-lisp
; Setup spelling correction for 4 languages
(let ((langs '("american" "francais" "deutsch8" "castellano8" "portuguese")))
  (setq lang-ring (make-ring (length langs)))
  (dolist (elem langs) (ring-insert lang-ring elem)))

(defun cycle-ispell-languages ()
  (interactive)
  (let ((lang (ring-ref lang-ring -1)))
    (ring-insert lang-ring lang)
    (ispell-change-dictionary lang)))

;; A bunch of functions to change the abbrev tables
(defun set-abbrev-lang-to-English () "" (interactive)
       (setq local-abbrev-table lang-american-mode-abbrev-table))

(defun set-abbrev-lang-to-French () "" (interactive)
       (setq local-abbrev-table lang-francais-mode-abbrev-table))

(defun set-abbrev-lang-to-Spanish () "" (interactive)
       (setq local-abbrev-table lang-castellano8-mode-abbrev-table))

(defun set-abbrev-lang-to-Portuguese () "" (interactive)
       (setq local-abbrev-table lang-portuguese-mode-abbrev-table))

(defun set-abbrev-lang-to-German () "" (interactive)
       (setq local-abbrev-table lang-deutsch8-mode-abbrev-table))

(defun dont-insert-expansion-char ()  t)    ;; this is the "hook" function
  (put 'dont-insert-expansion-char 'no-self-insert t)   ;; the hook should have a "no-self-insert"-property set
#+END_SRC

*** Abbreviation file(s)                                              :Files:
#+BEGIN_SRC emacs-lisp
(setq abbrev-file-name             ;; tell emacs where to read abbrev
   "~/.emacs.d/Abbrev/abbrev_defs")    ;; definitions from (does not work)...
(setq save-abbrevs t)
#+END_SRC

*** Enabling Abbrevs                                                  :Setup:
#+BEGIN_SRC emacs-lisp
(setq-default abbrev-mode t)
#+END_SRC

*** Language Keys                                                      :Keys:

Here we set some keys for comfortably switching between languages

#+BEGIN_SRC emacs-lisp
(global-set-key [f6] 'cycle-ispell-languages)
(global-set-key [f7] 'flyspell-mode)
(global-set-key (kbd "C-:") 'flyspell-auto-correct-previous-word)
(global-set-key (kbd "¢") 'flyspell-auto-correct-previous-word)

(global-set-key (kbd "H-e") 'set-abbrev-lang-to-English)
(global-set-key (kbd "H-f") 'set-abbrev-lang-to-French)
(global-set-key (kbd "H-s") 'set-abbrev-lang-to-Spanish)
(global-set-key (kbd "H-p") 'set-abbrev-lang-to-Portuguese)
(global-set-key (kbd "H-g") 'set-abbrev-lang-to-German)
#+END_SRC

** Other packages

These packages do not (yet?) have a dedicated chapter above.

#+NAME: Table-My-Packages
#+BEGIN_TABLE
| Package Name          | Package Usage                     | Configuration                                | after             |
|-----------------------+-----------------------------------+----------------------------------------------+-------------------|
| auto-complete         |                                   |                                              |                   |
| buffer-move           |                                   |                                              |                   |
| emmet-mode            | [[https://github.com/smihica/emmet-mode][type HTML quickly with CSS syntax]] |                                              |                   |
| evil-matchit          | Plugin for E.VI.L                 | global-evil-matchit-mode 1                   | evil              |
| evil-surround         | Plugin for E.VI.L                 | global-evil-surround-mode 1                  | evil              |
| expand-region         |                                   |                                              |                   |
| helm                  | Helm                              |                                              |                   |
| highlight-indentation |                                   | highlight-indentation-mode 1                 |                   |
| key-chord             |                                   |                                              |                   |
| magit                 |                                   | (global-set-key (kbd "C-x g") 'magit-status) |                   |
| org-ac                |                                   |                                              | org auto-complete |
| evil-vimish-fold      |                                   |                                              | evil vimish-fold  |
| rainbow-mode          | colorizes in-buffer color codes   | (rainbow-mode)                               |                   |
| yasnippet             | typing speed-up with templates    | (yas-global-mode)                            |                   |
| yasnippet-snippets    |                                   |                                              | yasnippet         |
| ztree                 | [[https://codeberg.org/fourier/ztree][Directory tree viewer]]             |                                              |                   |
#+END_TABLE

After each modification of the above table, the function Make-Use-Package-Block below must be called.

*** Use-package

#+NAME: Make-Use-Package-Block
#+HEADER: :results output code raw :results_switches ":tangle no"
#+HEADER: :wrap SRC emacs-lisp
#+HEADER: :var package-names=Table-My-Packages
#+HEADER: :tangle no :colnames t
#+BEGIN_SRC emacs-lisp
(defun generate-use-package-declarations (table)
  "Generate 'use-package' declarations for the packages in the input TABLE."
  (interactive)
  (dolist (row table)  ; Iterate over each row in the table
    (let ((pkg (car row))            ; Extract the package name
          (p-config  (nth 2 row))       ; Extract the package init
          (p-after (nth 3 row)))     ; Extract the package dependencies
      (cl-labels
          ((wrap-with-prefix
             (prefix str)
             (if (not (string-empty-p str))
                 (concat prefix
                         (if (and (string-prefix-p "(" str)
                                (string-suffix-p ")" str))
                             str (concat "(" str ")")))
               "")))  ; Return empty string if `str` is empty
        (princ
         (format
          "; Package: %s\n(use-package %s\n  :ensure t%s%s)\n\n"
          pkg pkg
          (wrap-with-prefix "\n  :after\n  "   p-after)
          (wrap-with-prefix "\n  :config\n  "  p-config)  ))))))

;; Call the function with the 'package-names' variable
(generate-use-package-declarations package-names)
#+END_SRC

#+RESULTS: Make-Use-Package-Block
#+begin_SRC emacs-lisp
; Package: auto-complete
(use-package auto-complete
  :ensure t)

; Package: buffer-move
(use-package buffer-move
  :ensure t)

; Package: emmet-mode
(use-package emmet-mode
  :ensure t)

; Package: evil-matchit
(use-package evil-matchit
  :ensure t
  :after
  (evil)
  :config
  (global-evil-matchit-mode 1))

; Package: evil-surround
(use-package evil-surround
  :ensure t
  :after
  (evil)
  :config
  (global-evil-surround-mode 1))

; Package: expand-region
(use-package expand-region
  :ensure t)

; Package: helm
(use-package helm
  :ensure t)

; Package: highlight-indentation
(use-package highlight-indentation
  :ensure t
  :config
  (highlight-indentation-mode 1))

; Package: key-chord
(use-package key-chord
  :ensure t)

; Package: magit
(use-package magit
  :ensure t
  :config
  (global-set-key (kbd "C-x g") 'magit-status))

; Package: org-ac
(use-package org-ac
  :ensure t
  :after
  (org auto-complete))

; Package: evil-vimish-fold
(use-package evil-vimish-fold
  :ensure t
  :after
  (evil vimish-fold))

; Package: rainbow-mode
(use-package rainbow-mode
  :ensure t
  :config
  (rainbow-mode))

; Package: yasnippet
(use-package yasnippet
  :ensure t
  :config
  (yas-global-mode))

; Package: yasnippet-snippets
(use-package yasnippet-snippets
  :ensure t
  :after
  (yasnippet))

; Package: ztree
(use-package ztree
  :ensure t)

#+end_SRC

* Prettify Symbols                                           :Visual:Symbols:
Show pretty symbols for things like lambda, etc
#+NAME: Symbol-Table
#+BEGIN_TABLE
| Ugly               | Mode       | Pretty | Reason                      |
|--------------------+------------+--------+-----------------------------|
| forEach            | js         | ∀      | std Math Symbol             |
| for                | js         | ↻     | Looping construct           |
| in                 | js         | ∊      | "element of"                |
| function           | js         | λ      | std gr. lambda              |
| <=                 | js         | ≤      | smaller  or equal           |
| >=                 | js         | ≥      | greater or equal            |
| =>                 | js         | ⤇     | "follows"                   |
| ^=                 | js         | ≙      |                             |
| ==                 | js         | ≡      |                             |
| ===                | js         | ≣      |                             |
| var                | js         | 𝕍     |                             |
| getElementById     | js         | ꖛ     | ⋕                          |
| querySelector      | js         | 𝑸     |                             |
| querySelectorAll   | js         | ℚ      |                             |
| insertAdjacentHTML | js         | @      |                             |
| document           | js         | 𝔻     |                             |
| .parentNode        | js         | ℙ      |                             |
| info               | js         | ⓘ     |                             |
| async              | js         | ⑂      | "fork"                      |
| beforebegin        | js         | ⬑     | "back and up the tag stack" |
| null               | js         | ⦰     | "Empty Set"                 |
| createElement      | js         | Ⓒ     |                             |
| console            | js         | 🖳     |                             |
| .classList         | js         | ℂ      |                             |
| insertBefore       | js         | ⥶     | "Place before tag"          |
| appendChild        | js         | ⥸     | "Place after tag"           |
| while              | js         | ⌛    |                             |
| true               | js         | ①     | True, binary one            |
| false              | js         | ⓪     | False, binary zero          |
| if                 | js         | ⁇     |                             |
| alert              | js         | ⓐ     |                             |
| from               | js         | ↤     |                             |
| +=                 | js         | ⥆     |                             |
| return             | js         | ↲      |                             |
| replace            | js         | ↕      |                             |
| body               | js         | 𝔹     |                             |
| innerText          | js         | 𝕋     |                             |
| innerHTML          | js         | ℍ      |                             |
| dolist             | emacs-lisp | ∀      | see js/forEach              |
| eq                 | emacs-lisp | ≟      |                             |
| setq               | emacs-lisp | ≔      |                             |
| nil                | emacs-lisp | ∅     |                             |
| if                 | emacs-lisp | ⁇     |                             |
| unless             | emacs-lisp | ⁈      |                             |
| not                | emacs-lisp | ¬      |                             |
| defun              | emacs-lisp | 𝔽     |                             |
| define-key         | emacs-lisp | 𝔻     |                             |
| message            | emacs-lisp | 𝕄     |                             |
| :extend            | emacs-lisp | ⭲     | Fill to the right           |
| :background        | emacs-lisp | █      |                             |
| :underline         | emacs-lisp | ▁      |                             |
| :overline          | emacs-lisp | ▔      |                             |
| progn              | emacs-lisp | 𝌆     | List of expressions         |
| require            | emacs-lisp | ℝ      |                             |
| kbd                | emacs-lisp | 𝕂     |                             |
| and                | emacs-lisp | ∧      |                             |
| add-hook           | emacs-lisp | ℍ      |                             |
| \#+BEGIN_SRC        | org        | ✎      |                             |
| \#+END_SRC          | org        | ⮴     |                             |
| :var               | org        | 𝕍     |                             |
| #+NAME:            | org        | ℕ      |                             |
| #+RESULTS:         | org        | ℝ      |                             |
| #+HEADER:          | org        | ▶     |                             |
| defun              | Unused     | 𝕗      |                             |
| defun              | Unused     | Ⓕ     |                             |
| add-hook           | Unused     | Ⓗ     |                             |
| define-key         | Unused     | Ⓓ     |                             |
| for                | python     | ↻     |                             |
| in                 | python     | ∊      |                             |
#+END_TABLE

After modifying the above table you have to call the function below:
#+NAME: AWK-Process-Table-Call
#+CALL: AWK-Process-Table()
to recreate the lisp-code with the new above definitions.

#+BEGIN_SRC emacs-lisp
(setq-default prettify-symbols-unprettify-at-point t)
(global-prettify-symbols-mode)

;; Block for resetting the hooks while testing:
;;(setq emacs-lisp-mode-hook nil)
;;(setq js-mode-hook nil)
;;(setq python-mode-hook nil)
#+END_SRC

#+RESULTS: AWK-Process-Table-Call
#+begin_SRC emacs-lisp
(add-hook 'js-mode-hook
  (lambda () (mapc (lambda (pair) (push pair prettify-symbols-alist))
    '(
      ("replace"             . ?↕)
      ("+="                  . ?⥆)
      ("from"                . ?↤)
      ("function"            . ?λ)
      ("innerText"           . ?𝕋)
      ("querySelectorAll"    . ?ℚ)
      ("insertBefore"        . ?⥶)
      ("async"               . ?⑂)
      (".parentNode"         . ?ℙ)
      ("insertAdjacentHTML"  . ?@)
      ("body"                . ?𝔹)
      ("createElement"       . ?Ⓒ)
      ("<="                  . ?≤)
      ("innerHTML"           . ?ℍ)
      ("document"            . ?𝔻)
      ("getElementById"      . ?ꖛ)
      ("=="                  . ?≡)
      ("querySelector"       . ?𝑸)
      ("=>"                  . ?⤇)
      (">="                  . ?≥)
      ("appendChild"         . ?⥸)
      ("in"                  . ?∊)
      ("for"                 . ?↻)
      ("forEach"             . ?∀)
      ("console"             . ?🖳)
      ("var"                 . ?𝕍)
      ("return"              . ?↲)
      ("false"               . ?⓪)
      ("null"                . ?⦰)
      ("info"                . ?ⓘ)
      ("alert"               . ?ⓐ)
      ("while"               . ?⌛)
      ("beforebegin"         . ?⬑)
      (".classList"          . ?ℂ)
      ("==="                 . ?≣)
      ("if"                  . ?⁇)
      ("true"                . ?①)
      ("^="                  . ?≙)
     ))))

(add-hook 'emacs-lisp-mode-hook
  (lambda () (mapc (lambda (pair) (push pair prettify-symbols-alist))
    '(
      ("unless"              . ?⁈)
      (":underline"          . ?▁)
      ("dolist"              . ?∀)
      ("defun"               . ?𝔽)
      ("kbd"                 . ?𝕂)
      ("and"                 . ?∧)
      ("eq"                  . ?≟)
      ("add-hook"            . ?ℍ)
      (":background"         . ?█)
      (":overline"           . ?▔)
      (":extend"             . ?⭲)
      ("setq"                . ?≔)
      ("require"             . ?ℝ)
      ("progn"               . ?𝌆)
      ("define-key"          . ?𝔻)
      ("nil"                 . ?∅)
      ("not"                 . ?¬)
      ("message"             . ?𝕄)
      ("if"                  . ?⁇)
     ))))

(add-hook 'org-mode-hook
  (lambda () (mapc (lambda (pair) (push pair prettify-symbols-alist))
    '(
      ("#+RESULTS:"          . ?ℝ)
      ("\#+END_SRC"          . ?⮴)
      ("#+HEADER:"           . ?▶)
      ("#+NAME:"             . ?ℕ)
      ("\#+begin_SRC"        . ?✎)
      ("\#+BEGIN_SRC"        . ?✎)
      (":var"                . ?𝕍)
      ("\#+end_SRC"          . ?⮴)
     ))))

(add-hook 'python-mode-hook
  (lambda () (mapc (lambda (pair) (push pair prettify-symbols-alist))
    '(
      ("in"                  . ?∊)
      ("for"                 . ?↻)
     ))))

#+end_SRC

#+NAME: AWK-Process-Table
#+BEGIN_SRC awk :stdin Symbol-Table
NR<2 {next;}
{res[$2][$1]=$3}
ml<length($1){ml=length($1)}
END {
  for (mode in res) {
    if (mode=="Unused") continue;
    print "(add-hook '"mode"-mode-hook"
    print "  (lambda () (mapc (lambda (pair) (push pair prettify-symbols-alist))"
    print "    '("
    for (item in res[mode]) {
      padding = gensub(/ /, " ", "g", sprintf("%*s", ml+1-length(item), ""))
      printf "      (\"%s\"%s . ?%s)\n" , item , padding, res[mode][item]
    }
    print "     ))))\n"
  }
}
#+END_SRC

#+NAME: Make-Pretty-Pairs
#+HEADER: :var prettifyable=Symbol-Table
#+HEADER: :var targetMode="DoesNotExist" :results list
#+BEGIN_SRC emacs-lisp :noweb yes :tangle no
(let ((res nil))
  (dolist (row prettifyable)
    (when (string= (nth 1 row ) targetMode)
      (push (cons (car row) (string-to-char (nth 2 row))) res)
    )
  )
  res
)
#+END_SRC

** TODO make it unprettify at point in SourceCode blocks
Doesnt work yet, until when CodeBlock is opened seperate frame with =C-c C-'=
#+BEGIN_SRC emacs-lisp
(setq prettify-symbols-unprettify-at-point t)
#+END_SRC

* Org mode customizations                                               :ORG:
** Some tool functions for org                                        :Tools:
#+BEGIN_SRC emacs-lisp
(defun zin/org-tag-match-context (&optional todo-only match)
    "Identical search to `org-match-sparse-tree', but shows the content of the matches."
   (interactive "P")
  (org-agenda-prepare-buffers (list (current-buffer)))
   (org-overview)
   (org-remove-occur-highlights)
  (org-scan-tags '(progn (org-show-entry)
                         (org-show-context))
(cdr (org-make-tags-matcher match)) todo-only))
#+END_SRC

** Org Visual Customizations                                     :ORG:Visual:

This Chapter contains some visual customizations for org-mode

#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)

  (require 'color)
#+END_SRC

*** Source code blocks formatting                       :COLORS:FACES:BLOCKS:

This configuration colors the opening '#+BEGIN_' and closing '#+END_'-'SRC' statements with a different (greenish) color, so that these blocks stand out more from the surrounding text.

The first block below is for the '#+BEGIN_' line, the second one for the background of the actual code block, and the third block for the '#+END_' line.
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook
     (lambda ()
       (if (window-system)
           (progn (custom-set-faces
               ; Face used for the line delimiting the begin of source blocks.
               '(org-block-begin-line
                 ((t (:background "#EAEAFF" :extend t :foreground "#008ED1" :underline "#A7A6AA"))))
               ; Face used for the line delimiting the end of source blocks.
               '(org-block-end-line
                 ((t (:background "#EAEAFF" :extend t :foreground "#008ED1" :overline "#A7A6AA"))))
               ; Face used for the source blocks background.
               '(org-block
                 ((t (:background "#EFF0F1" :extend t))))
               )))))

  (setq org-src-block-faces
     '(
       ("emacs-lisp" (:background "#ececff" :extend t))
       ("awk"        (:background "#ecffec"))
       ("python"     (:background "#E5FFB8" ))
      ))
#+END_SRC

** Org Keys                                                            :Keys:
#+BEGIN_SRC emacs-lisp
;┌┐ Key Bindings: ┌─────────────────────────────────────────────────────────────
;└┴───────────────┘
(define-key global-map "\C-cc" 'org-capture)
#+END_SRC

** Org Babel                                                          :Babel:
#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages 'org-babel-load-languages
    '(
        (shell      . t)
        (R          . t)
        (awk        . t)
        (sqlite     . t)
        (emacs-lisp . t)
        (dot        . t)
        (gnuplot    . t)
        (ansible    . t)
    )
)

;;; Personal Library of Babel. Use the first command, if you want to use a
;;; single library-of-babel.org file:
(org-babel-lob-ingest "~/.emacs.d/library-of-babel.org")
;;; Or this block, if you'd prefer to split your library into several files:
(funcall (lambda (dir)
         (if (file-directory-p dir)
             (mapcar (lambda (file) (org-babel-lob-ingest file))
                     (directory-files dir t ".+\\.org?$" t ))))
       "~/.emacs.d/library-of-babel")

;; add default arguments to use when evaluating a source block
(add-to-list 'org-babel-default-header-args:emacs-lisp
             '(:noweb . "yes"))
#+END_SRC

** Org Misc                                                        :Unsorted:
#+BEGIN_SRC emacs-lisp
  ;;; Additions to the org mode template alist.
  ;;; Note: Most of the templates are defined as yasnippets
  (add-to-list 'org-structure-template-alist '("n" "#+NAME: ?"))

  (setq org-default-notes-file (concat org-directory "/notes.org"))
#+END_SRC

* UNSORTED CONFIG
#+BEGIN_SRC emacs-lisp :comments org
;(require 'highlight-indentation)
;(highlight-indentation-mode 1)
;;(define-key evil-insert-state-map (kbd "<tab>") 'dabbrev-completion)

(require 'buffer-move) ;; Keybindings defined below
; CTRL+<ARROWS> move between Buffers, and wrap around.

;;(add-hook 'prog-mode-hook 'rainbow-delimiters-mode)

;(setq auto-save-file-name-transforms
;      `((".*" ,temporary-file-directory t)))

(setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")

(setq indent-tabs-mode nil)
(setq js-indent-level 2)
#+END_SRC

