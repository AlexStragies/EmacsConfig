 # <html -*- mode: org ; coding: utf-8-with-signature -*- >
 # <script src="js/org-render.js"></script><body><!--
 # This renders this org-file directly to html in certain conditions,
 # see for details: https://github.com/AlexStragies/ORGJS-Wrapper

#+Title: The Emacs Config in Org-Mode
#+Author: Alex Stragies
#+LINK: wikipedia    https://en.wikipedia.org/wiki/
#+LINK: firewall     http://langw/
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/org-view.css" />
#+PROPERTY: header-args:emacs-lisp :noweb yes
#+PROPERTY: header-args:awk  :tangle no :results code
#+PROPERTY: header-args:awk+ :wrap SRC emacs-lisp
#+options: toc:t

.. and a small loader in init.el
* Overview
This configuration is centered around the following topics:
- ORG mode for multilingual text authoring and documentation
- EVIL mode for support of the VI text manipulation grammar.
- GraphViz support optimized for editing/viewing/presenting
- Literate Devops

** Installation with =git clone=                                  :INSTALL:GIT:
#+NAME: INSTALL-COMMAND-GIT
#+BEGIN_SRC shell :var TARGETDIR="~/.emacs.d" :tangle no
: "${TARGETDIR:=$HOME/.emacs.d}";
[ -e "$TARGETDIR" ] && mv $TARGETDIR ${TARGETDIR}_BACKUP;
git clone --recurse-submodules -j8 https://github.com/AlexStragies/EmacsConfig $TARGETDIR
#+END_SRC
Note: This code block will create a backup of your current directory, with the suffix =_BACKUP=.

All packages but =column-marker= are downloaded (if not installed system-wide) via Emacs. =column-marker= will be downloaded on first run. [[#SCRIPT-DOWNLOAD-COLUMN-MARKER][This block below takes care of that]].

*** Components
**** init.el - The initial loader
- Has configuration for the packacke manager
- Version & existence check for org-mode
- Loads main configuration [[https://github.com/AlexStragies/EmacsConfig/blob/master/emacs.org][emacs.org]]

**** emacs.org - Main File
- [[https://github.com/AlexStragies/EmacsConfig/blob/master/emacs.org][emacs.org]] - The hybrid org/html configuration file, click [[https://raw.githubusercontent.com/AlexStragies/EmacsConfig/refs/heads/master/emacs.org][here for raw ORG source]].

**** Sub-Module Repos
- [[https://github.com/AlexStragies/MultiLangWritingAbbrevs.git][Multi Language Writing Abbreviations]] : Abbrev lists for the lazy quick typist
- [[https://github.com/AlexStragies/library-of-babel.git][My Library of Babel]] - A small collection of functions
- [[https://github.com/AlexStragies/MyYASnippets.git][My YASnippets]] - Public snippets mostly org mode and graphviz stuff at this point
- My Fork of =ob-ansible= with some PRs merged (in `contrib` subdir).

** Running this configuration
- On first startup, this configuration will probably spend some minutes downloading quite some packages, depending on what packages are installed at the system package manager level. On e.g. Debian mosts packages in the below list are available as =deb=-packages.
- Every subsequent startup still takes too long for (my) comfortable use, so running Emacs in =Server Mode= is strongly recommended. Most modern distributions ship a =systemd= user service unit, that just needs to be enabled with =systemctl --user enable emacs.service=
- When running Emacs is =Server Mode=, launching a new Editor-Client window takes less than 2 seconds, even with largish files.

* Using this settings file and Emacs
:PROPERTIES:
:CUSTOM_ID: Usage
:END:

As mentioned in the Overview, this configuration is centered around usage of EVIL and ORG. Keep especially the former in mind, if you look up other Emacs resources.

The configuration tables below are automatically read at startup and appropriate lisp statements are constructed.

** Custom keyboard settings

The following table contains the definition of the leader key:

#+NAME: Table-Keys
| Function | Key | Usage                                                           |
|----------+-----+-----------------------------------------------------------------|
| leader   | ð   | Access the 'leader' submenu, will be replaced by a `hydra` soon |
| ace-jump | æ   | Launch ACE-Mode Jump                                            |

Change to keys easily reachable, and as of yet unused. Then restart emacs, the configuration will extract these keys from the table above.

* Emacs Configuration
** Basic User Interface Settings
*** Hide the Menu-Bar by default                                    :MenuBar:
#+BEGIN_SRC emacs-lisp :comments org
(menu-bar-mode -1)
#+END_SRC

*** Hide the Tool-Bar by default                                    :ToolBar:
#+BEGIN_SRC emacs-lisp :comments org
(tool-bar-mode -1)
#+END_SRC

*** Line and Column numbers
#+NAME: SETUP-UI-LINE-NUMS-AND-COLUMN-NUM
#+BEGIN_SRC emacs-lisp :comments org
(global-display-line-numbers-mode)
;; Enable line numbers by default for file buffers
(add-hook 'find-file-hook
   (lambda ()
     (when (and buffer-file-name  ;; Buffer is associated with a file
              (not (minibufferp))) ;; Exclude minibuffers
       (display-line-numbers-mode 1))))

;; Disable line numbers for specific buffer types
(add-hook 'buffer-list-update-hook
   (lambda ()
     (when (or (derived-mode-p 'completion-list-mode) ;; Completion buffers
               (string-match-p "\\*.*\\*" (buffer-name))) ;; Match *special* buffers
       (display-line-numbers-mode -1))))

(defun toggle-line-numbers-relative-absolute ()
  "Toggle `display-line-numbers` between 'relative and 'absolute."
  (interactive)
  (setq display-line-numbers
     (if (eq display-line-numbers 'relative)
         'absolute
       'relative))
  (message "Line numbers set to: %s" display-line-numbers))

(column-number-mode t) ; This should enable column numbers in the mode line
#+END_SRC

** Add `load-path` for `contrib` subdir                             :CONTRIB:
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/contrib/")
#+END_SRC

** Behaviors
*** custom-file variable

#+BEGIN_SRC emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file 'noerror)
#+END_SRC

*** Backup-Files                                                     :BACKUP:

How and where to place backups and handles for opened files, and how many version back to keep.

#+NAME: EMACS-Settings
#+BEGIN_SRC emacs-lisp
(setq backup-by-copying t      ; don't clobber symlinks
   backup-directory-alist
   '(("." . "~/.saves"))    ; don't litter my fs tree
   delete-old-versions t
   kept-new-versions 6
   kept-old-versions 2
   version-control t)       ; use versioned backups

(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
#+END_SRC

*** Electric Pairs and Paren-Mode                              :PAIRS:PARENS:
#+BEGIN_SRC emacs-lisp
(electric-pair-mode)
(show-paren-mode t) ;; enable show paren mode
(setq show-paren-style 'expression) ;; highlight whole expression
#+END_SRC

*** Tabs and Spaces                                              :Whitespace:

#+NAME: SETTINGS-TABS-N-SPACES
#+BEGIN_SRC emacs-lisp
(setq-default tab-width 4
          indent-tabs-mode nil
          js-indent-level 2)
#+END_SRC

*** Global Key Bindings
#+BEGIN_SRC emacs-lisp
; C-h normally calls 'Help'. This function can be called with F1, and via M-x help
(global-set-key (kbd "C-h") 'delete-backward-char)
#+END_SRC

* Tool functions                                                      :Tools:
Nomenclature:
- xxx-xxx-xxx :: callable functions
- Table-Xxx-Xxx :: Tables

** Color Picker                                                      :Colors:

#+NAME: My-Insert-Color-Hex
#+BEGIN_SRC emacs-lisp
(defun my-insert-color-hex ()
  "Select a color and insert its hexadecimal format."
  (interactive "*")
  (let ((buf (current-buffer)))
    (list-colors-display
     nil nil `(lambda (name)
                (interactive)
                (quit-window)
                (with-current-buffer ,buf
                  (insert (apply 'color-rgb-to-hex
                                 (color-name-to-rgb name))))))))
#+END_SRC

Search this file for `my-insert-color-hex`, if you want to see, where it is mapped to a key.

** delete-file-visited-by-buffer and delete-file-and-buffer
#+BEGIN_SRC emacs-lisp
(defun delete-file-and-buffer ()
  "Kill the current buffer and deletes the file it is visiting."
  (interactive)
  (let ((filename (buffer-file-name)))
    (if filename
        (if (y-or-n-p (concat "Do you really want to delete file " filename " ?"))
            (progn
              (delete-file filename)
              (message "Deleted file %s." filename)
              (kill-buffer)))
            (message "Not a file visiting buffer!"))))

(defun delete-file-visited-by-buffer (buffername)
  "Delete the file visited by the buffer named BUFFERNAME."
  (interactive "b")
  (let* ((buffer (get-buffer buffername))
         (filename (buffer-file-name buffer)))
    (when filename
      (delete-file filename)
      (kill-buffer-ask buffer))))
#+END_SRC

*** TODO Where do I use this function?

* Package Configurations                                           :Packages:
** Packages Overview Table
#+NAME: Table-My-Packages
| Package Name          | Package Usage                                                 | Configuration                             |
|-----------------------+---------------------------------------------------------------+-------------------------------------------|
| org                   | [[https://orgmode.org/][Computational Notebooks, Spreadsheets, Authoring, Programming]] | [[#org][View Config Blocks for *ORG*]]              |
| buffer-move           | TODO:                                                         |                                           |
| emmet-mode            | [[https://github.com/smihica/emmet-mode][type HTML quickly with CSS syntax]]                             |                                           |
| evil                  | Use VIM Text Manipulation Grammar                             | [[\#evil][View Config-Blocks for *Evil*]]             |
| evil-leader           | Leader Key Map configuration                                  | [[\#evil-leader][View Config-Block for *Evil-Leader*]]       |
| evil-org              | Evil support for ORG                                          | [[\#evil-org][View Config-Block for *Evil-Org*]]          |
| evil-matchit          | Plugin for E.VI.L                                             | (global-evil-matchit-mode  1) :after evil |
| evil-surround         | Plugin for E.VI.L                                             | (global-evil-surround-mode 1) :after evil |
| expand-region         | TODO:                                                         |                                           |
| ace-jump              |                                                               | [[\#ace-jump][View Config Block for *Ace-Jump*]]          |
| helm                  | Helm                                                          | [[\#helm][View Config-Block for *Helm*]]              |
| lsp                   | Language Server Protocol                                      | [[\#language-server-protocol][View LSP Config Blocks]]                    |
| graphviz-dot-mode     |                                                               |                                           |
| highlight-indentation |                                                               | (highlight-indentation-mode 1  )          |
| key-chord             |                                                               | [[\#use-package][View use-package chords Config]]            |
| magit                 |                                                               | :bind ("C-x g" . magit-status)            |
| org-ac                |                                                               | :after (org auto-complete)                |
| evil-vimish-fold      | Folding like in VIM                                           | :after (evil vimish-fold)                 |
| rainbow-mode          | colorizes in-buffer color codes                               | (rainbow-mode)                            |
| yasnippet             | typing speed-up with templates                                | [[#yasnippet][View Config Block for *YASnippet*]]         |
| ztree                 | [[https://codeberg.org/fourier/ztree][Directory tree viewer]]                                         |                                           |

*** Adding packages to configuration table
To install a new package, and manage the configuration here, just add another line to the above table.
- First Column:  Package name as in the package manager
- Second Column: Freeform text to for short usage hint, ideally linked to package homepage
- Third Column:
  - Org-Mode link to more elaborate config in dedicated chapter *or*
  - config string (":config" is prepended, if config string does not start with ":")

Most of the configuration is wrapped up in `(use-package ...)` statements in chapters below.

** Use-Package
To enable use of chords, this needs to be enabled:
#+NAME: USE-PACKAGE-EXT-chords
#+BEGIN_SRC emacs-lisp :comments org
(use-package use-package-chords
  :ensure t
  :config (key-chord-mode 1)
  )
#+END_SRC

** Org mode                                                             :ORG:
#+BEGIN_SRC emacs-lisp
(use-package org :ensure t
  ;┌┐ Key Bindings: ┌───────────────────────────────────────────────────────────
  ;└┴───────────────┘
  :bind
    ("C-c c" . org-capture)
  :config
  ;┌┐ Visual Setup: ┌───────────────────────────────────────────────────────────
  ;└┴───────────────┘
  (setq org-ellipsis "…")
  (setq org-src-fontify-natively t)
  (setq org-hide-emphasis-markers t)
  ;(define-key global-map "\C-cc" 'org-capture)
  ;┌┐ Org Files: ┌──────────────────────────────────────────────────────────────
  ;└┴────────────┘
  (setq org-default-notes-file (concat org-directory "/notes.org"))
)
#+END_SRC

*** Org Babel                                                         :Babel:
#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages 'org-babel-load-languages
    '(
        (shell      . t)
        (R          . t)
        (awk        . t)
        (sqlite     . t)
        (emacs-lisp . t)
        (dot        . t)
        (gnuplot    . t)
        (ansible    . t)
    )
)

;;; Personal Library of Babel. Use the first command, if you want to use a
;;; single library-of-babel.org file:
(org-babel-lob-ingest "~/.emacs.d/library-of-babel.org")
;;; Or this block, if you'd prefer to split your library into several files:
(funcall (lambda (dir)
         (if (file-directory-p dir)
             (mapcar (lambda (file) (org-babel-lob-ingest file))
                     (directory-files dir t ".+\\.org?$" t ))))
       "~/.emacs.d/library-of-babel")

;; add default arguments to use when evaluating a source block
(add-to-list 'org-babel-default-header-args:emacs-lisp
             '(:noweb . "yes"))
#+END_SRC

*** Source code blocks formatting                       :COLORS:FACES:BLOCKS:
This configuration colors the opening '#+BEGIN_' and closing '#+END_'-'SRC' statements with a different (greenish) color, so that these blocks stand out more from the surrounding text.

The first block below is for the '#+BEGIN_' line, the second one for the '#+END_' line, and the last one specifies the default background for the org source code blocks.

The second block sets specific colors for some specific languages.
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook
   (lambda ()
     (if (window-system)
         (progn (custom-set-faces
             ; Face used for the line delimiting the begin of source blocks.
             '(org-block-begin-line
               ((t (:background "#EAEAFF" :extend t :foreground "#008ED1" :underline "#A7A6AA"))))
             ; Face used for the line delimiting the end of source blocks.
             '(org-block-end-line
               ((t (:background "#EAEAFF" :extend t :foreground "#008ED1" :overline "#A7A6AA"))))
             ; Face used for the source blocks background.
             '(org-block
               ((t (:background "#EFF0F1" :extend t))))
             )))))

(setq org-src-block-faces
   '(
     ("emacs-lisp" (:background "#ececff" :extend t))
     ("awk"        (:background "#ecffec" :extend t))
     ("python"     (:background "#E5FFB8" :extend t))
    ))
#+END_SRC

*** Some tool functions for org                                       :Tools:
#+BEGIN_SRC emacs-lisp
(defun zin/org-tag-match-context (&optional todo-only match)
    "Identical search to `org-match-sparse-tree', but shows the content of the matches."
   (interactive "P")
  (org-agenda-prepare-buffers (list (current-buffer)))
   (org-overview)
   (org-remove-occur-highlights)
  (org-scan-tags '(progn (org-show-entry)
                         (org-show-context))
(cdr (org-make-tags-matcher match)) todo-only))
#+END_SRC

** Evil                                                          :EVIL:CHORD:
Evil is an Extensible VI Layer for [[http://www.gnu.org/software/emacs/][Emacs]]. It emulates the main features of [[http://www.vim.org/][Vim]], and provides facilities for writing custom extensions. Also see the page on [[http://emacswiki.org/emacs/Evil][EmacsWiki]].

#+NAME: USE-PACKAGE-evil
#+BEGIN_SRC emacs-lisp
;┌┐ Evil Mode: ┌────────────────────────────────────────────────────────────────
;└┴────────────┘
(use-package evil
  :ensure t
  :init
  (evil-mode 1)  ;; Enable evil-mode
  :chords (:map evil-insert-state-map
                ("jk" . evil-normal-state))
  :config

  ;; Keybindings
  (define-key evil-motion-state-map "ö" 'evil-ex)
  (define-key evil-normal-state-map (kbd "√") 'er/expand-region)
)
#+END_SRC

*** Evil-Org
#+NAME: USE-PACKAGE-evil-org
#+BEGIN_SRC emacs-lisp
(use-package evil-org
  :ensure t
  :after (org evil)
  :diminish
  :hook (org-mode . evil-org-mode) ; Automatically enable evil-org-mode in org buffers
)
#+END_SRC

*** Evil-Leader
#+NAME: USE-PACKAGE-evil-leader
#+BEGIN_SRC emacs-lisp :var leader=Table-Keys[2,1]
; evil-leader, VI leader key plugin
(use-package evil-leader
  :ensure t
  :after evil
  :config
  (global-evil-leader-mode)
  (evil-leader/set-leader leader)
  (evil-leader/set-key
   "e" 'find-file
   "b" 'switch-to-buffer
   "C" 'hl-line-mode
   "c" 'my-insert-color-hex
   "h" 'helm-M-x
   "l" 'display-line-numbers-mode
   "f" 'display-fill-column-indicator-mode
   "s" 'cycle-ispell-languages
   "R" 'rainbow-delimiters-mode
   "F" 'set-abbrev-lang-to-French
   "Z" 'vimish-fold-delete
   "E" 'set-abbrev-lang-to-English
   "j" 'ace-jump-mode
   "m" 'menu-bar-mode
   "P" 'prettify-symbols-mode
   "\\" 'zin/org-tag-match-context
   "r" 'er/expand-region
   "L" 'toggle-line-numbers-relative-absolute
   "k" 'kill-buffer))
#+END_SRC

*** Vimish-Fold                                                        :FOLD:
#+NAME: USE-PACKAGE-vimish-fold
#+BEGIN_SRC emacs-lisp
(use-package vimish-fold
  :ensure t
  :bind (
    :map evil-visual-state-map
    ("SPC" . vimish-fold)
    :map evil-normal-state-map
    ("SPC" . vimish-fold-toggle)
  )
  :after evil
)
#+END_SRC

** Helm                                                          :HELM:CHORD:
#+NAME: USE-PACKAGE-helm
#+BEGIN_SRC emacs-lisp
;┌┐ Helm Mode: ┌────────────────────────────────────────────────────────────────
;└┴────────────┘
(use-package helm
  ;; The default "C-x c" is quite close to "C-x C-c", which quits Emacs.
  ;; Changed to "C-c h". Note: We must set "C-c h" globally, because we
  ;; cannot change `helm-command-prefix-key' once `helm-config' is loaded.
  :ensure t
  :demand t
  :chords ("jk" . helm-M-x)
  :bind (
     ("œ"         . helm-M-x)
     ("C-c h o"   . helm-occur)
     ("<f1> SPC"  . helm-all-mark-rings) ; I modified the keybinding
     ("M-y"       . helm-show-kill-ring)
     ("C-c h x"   . helm-register)    ; C-x r SPC and C-x r j
     ("<menu>"    . helm-M-x)
     ("C-c h g"   . helm-google-suggest)
     ("C-c h M-:" . helm-eval-expression-with-eldoc)
     ("C-x C-f"   . helm-find-files)
  )
)
#+END_SRC

** Ace-Jump                                                        :JUMP:NAV:
#+NAME: USE-PACKAGE-ace-jump-mode
#+BEGIN_SRC emacs-lisp :var acejmp=Table-Keys[3,1] :results silent
(use-package ace-jump-mode
  :ensure t
  :after evil
  :config
  (bind-key acejmp 'ace-jump-mode)  ;; Bind ace-jump-mode to the desired keys
; The following ways to specify the bind do not work ?!
;   :bind
;   (acejmp . ace-jump-mode)          ; This would be the preferred form
;   (,(cons (acejmp 'ace-jump-mode))) ; Even this would be better than the above
)
#+END_SRC

** Language Server Protocol                                          :JS:LSP:
This code will automatically install lsp-mode and set it up to run when opening JavaScript files:
#+NAME: USE-PACKAGE-lsp-mode
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :ensure   t
  :hook     (js-mode . lsp)
  :commands lsp
  :config   (setq lsp-prefer-flymake nil) ;; Use flycheck for diagnostics instead of flymake:
)
#+END_SRC

*** LSP User Interface
To enhance the user interface with LSP, install `lsp-ui`, which provides features like documentation popups, code lenses, and more:
#+BEGIN_SRC emacs-lisp
(use-package lsp-ui
  :ensure   t
  :hook     (js-mode . lsp-ui-mode)
  :commands lsp-ui-mode)
#+END_SRC

** TRAMP                                                              :TRAMP:
#+NAME: USE-PACKAGE-tramp
#+BEGIN_SRC emacs-lisp
(use-package tramp
  :init
  (setq tramp-default-method "ssh") ;; Set default connection method for TRAMP
  :config
  (add-to-list 'tramp-default-user-alist
               '("smb" ".*\\'" "alex.stragies"))
)
#+END_SRC

** HideShow                                                    :BUILTIN:FOLD:
#+NAME: USE-PACKAGE-hideshow
#+BEGIN_SRC emacs-lisp
(use-package hideshow
  :ensure   nil
  :after    evil
  :init     (add-hook #'prog-mode-hook #'hs-minor-mode)
  :diminish hs-minor-mode
  :config   (setcdr (assoc 'js-mode hs-special-modes-alist)
                    '("[{[]" "[}\\]]" "/[*/]" nil))
  :bind     (:map evil-normal-state-map
                  ("TAB" . hs-toggle-hiding))
)
#+END_SRC

** Wind-Move                                                :WINDOWS:BUILTIN:
#+NAME: USE-PACKAGE-windmove
#+BEGIN_SRC emacs-lisp
(use-package windmove
  ;; For readers: don't ensure means that we don't need to download it. It is built in
  :ensure nil
  :config
  (windmove-default-keybindings 'hyper)
  (setq windmove-wrap-around t)
)
#+END_SRC

** WhiteSpace                                                    :WhiteSpace:
This configuration is useful to show erronenous whitespace.

#+BEGIN_SRC emacs-lisp :comments org
(use-package whitespace
  :config
  (setq
    whitespace-style '(face tabs tab-mark trailing newline newline-mark)
    whitespace-display-mappings '(
;      (space-mark   ?\     [?\u00B7]     [?.])
;      (space-mark   ?\xA0  [?\u00A4]     [?_])
      (newline-mark ?\n    [182 ?\n])
      (tab-mark     ?\t    [?\u00BB ?\t] [?\\ ?\t])))
  (global-whitespace-mode t))
#+END_SRC

** TODO Auto-Complete                                              :COMPLETE:
#+NAME: USE-PACKAGE-auto-complete
#+BEGIN_SRC emacs-lisp
(use-package auto-complete-config
  :ensure auto-complete
  :bind ("M-<tab>" . my--auto-complete)
  :init
  (defun my--auto-complete ()
    (interactive)
    (unless (boundp 'auto-complete-mode)
      (global-auto-complete-mode 1))
    (auto-complete))
)
;(require 'auto-complete-config)
;(add-to-list 'ac-dictionary-directories "~/.emacs.d/ac-dict")
;(ac-config-default)
;;;(global-auto-complete-mode t)
#+END_SRC

** TODO Column-Marker                                                :VISUAL:
Column-Marker is not on Melpa, thus needs to be downloaded once:
#+NAME: SCRIPT-DOWNLOAD-COLUMN-MARKER
#+BEGIN_SRC emacs-lisp :comments org
(let ((url-base "https://raw.githubusercontent.com/emacsmirror/column-marker/refs/heads/master/")
      (dest-dir "contrib/column-marker/")                  ; Directory to save the file
      (filename "column-marker.el"))                       ; File name
  (let* ((url (concat url-base filename))                  ; Full URL
         (target-file (expand-file-name filename dest-dir)) ; Full path to the target file
         (symlink-file (expand-file-name filename "contrib/"))) ; Path for the symlink
    ;; Ensure the target directory exists
    (make-directory (file-name-directory target-file) t)
    ;; Check if the target file exists
    (if (file-exists-p target-file)
        (message "File already exists: %s" target-file)
      (progn
        (url-copy-file url target-file t)
        (message "File downloaded to: %s" target-file)))
    ;; Create a symbolic link in the parent directory
    (if (file-exists-p symlink-file)
        (message "Symlink already exists: %s" symlink-file)
      (progn
        (make-symbolic-link target-file symlink-file t)
        (message "Symlink created: %s -> %s" symlink-file target-file)))))
#+END_SRC

#+NAME: USE-PACKAGE-column-marker
#+BEGIN_SRC emacs-lisp
(use-package column-marker
  :load-path "contrib/column-marker/"
)

;(column-marker-1 79)
;(column-marker-2 89)
;(column-marker-3 109)
;(column-marker-create column-marker-4 column-marker-1-face)
;(column-marker-create column-marker-5 column-marker-1-face)
;(column-marker-4 2)
;(column-marker-5 4)
;(column-marker-create column-marker-6 column-marker-1-face)
#+END_SRC

** TODO Abbrev                                             :ABBREV:Languages:
Multilingual Abbreviations & Spelling

#+NAME: Table-Languages
| Language   | Dictionary  | Notes              | Key (TODO) |
|------------+-------------+--------------------+------------|
| English    | american    |                    |            |
| French     | francais    |                    |            |
| German     | deutsch8    |                    |            |
| Spanish    | castellano8 |                    |            |
| Portuguese | portuguese  | Doesn't work (yet) |            |

Setup spelling correction language list ring from table above
#+BEGIN_SRC emacs-lisp :var langList=Table-Languages[2:5,1]
(setq lang-ring (make-ring (length langList)))
(dolist (elem langList) (ring-insert lang-ring elem))
#+END_SRC

*** Language Abbrev and Completion change keys                         :Keys:
Here we set some keys for comfortably switching between languages
#+NAME: INC-ABBREV-KEYS
#+BEGIN_SRC emacs-lisp :tangle no
:bind
  ([f6]  . cycle-ispell-languages)
  ([f7]  . flyspell-mode)
  ("C-:" . flyspell-auto-correct-previous-word)
  ("¢"   . flyspell-auto-correct-previous-word)
#+END_SRC

*** Abbreviation file(s)                                              :Files:
#+NAME: INC-ABBREV-FILES
#+BEGIN_SRC emacs-lisp :tangle no
(setq abbrev-file-name             ;; tell emacs where to read abbrev
   "~/.emacs.d/Abbrev/abbrev_defs")    ;; definitions from (does not work)...
#+END_SRC

*** Enabling Abbrevs                                                  :Setup:
#+BEGIN_SRC emacs-lisp :comments org :noweb yes
<<INC-ABBREV-FUNCTIONS>>

(use-package abbrev :ensure nil
  <<INC-ABBREV-KEYS>>
  :config
  (setq-default abbrev-mode t)
  <<INC-ABBREV-FILES>>
  (setq save-abbrevs t)
)
#+END_SRC

*** Tool functions for language switching etc
#+NAME: INC-ABBREV-FUNCTIONS
#+BEGIN_SRC emacs-lisp :tangle no
(defun cycle-ispell-languages ()
  (interactive)
  (let ((lang (ring-ref lang-ring -1)))
    (ring-insert lang-ring lang)
    (ispell-change-dictionary lang)
    (set-abbrev-lang lang)))

(defun set-abbrev-lang (dictLang) "" (interactive)
  (setq local-abbrev-table
     (eval (read (format "lang-%s-mode-abbrev-table" dictLang)))))

;;(defun dont-insert-expansion-char ()  t)
;;  (put 'dont-insert-expansion-char 'no-self-insert t)
(defun dont-insert-expansion-char ()      ;; this is the "hook" function
  (put 'dont-insert-expansion-char 'no-self-insert t))   ;; the hook should have a "no-self-insert"-property set
#+END_SRC

** Yasnippet                                                      :yasnippet:
#+NAME: USE-PACKAGE-Yasnippet
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :config
  (use-package yasnippet-snippets
    :ensure t)
  (yas-global-mode t)
  (define-key yas-minor-mode-map (kbd "<tab>") nil)
  (define-key yas-minor-mode-map (kbd "C-'") #'yas-expand)
  (setq yas-triggers-in-field t)
)
#+END_SRC

*** List of installed yasnippets
#+NAME: List-installed-yasnippets
#+HEADER: :tangle no :dir (concat (getenv "HOME") "/.emacs.d/")
#+HEADER: :colnames yes :post add-header-line(*this*)
#+BEGIN_SRC sh
echo Mode Snippet
find snippets/ -path snippets/.git -prune -o -type f  -print \
    | grep -v 'README.org' \
    | sed -e 's|snippets/||;s|/| |' | sort
#+END_SRC

#+RESULTS: List-installed-yasnippets
| Mode              | Snippet                           |
|-------------------+-----------------------------------|
| graphviz-dot-mode | edge-with-attributes-bracket      |
| graphviz-dot-mode | image-attribute                   |
| graphviz-dot-mode | invisible-point                   |
| graphviz-dot-mode | node-with-attributes              |
| graphviz-dot-mode | node-with-shape-and-label         |
| graphviz-dot-mode | shape-attribute                   |
| graphviz-dot-mode | style-invisible                   |
| graphviz-dot-mode | tooltip-attribute                 |
| graphviz-dot-mode | url-attribute                     |
| graphviz-dot-mode | url-attribute-with-injected-class |
| graphviz-dot-mode | url-attribute-with-target         |
| org-mode          | Dot-Graph-Template                |
| org-mode          | header-item                       |
| org-mode          | Insert-Org-Header-Args            |
| org-mode          | Named-Source-Code-Block           |
| org-mode          | table2                            |
| org-mode          | table3                            |

** Other packages
The block below creates and runs `use-package` statements for all packages in the table at the start of chapter.

#+NAME: RUN-USE-PACKAGE-STATEMENTS-FROM-TABLE
#+HEADER: :var package-names=Table-My-Packages
#+BEGIN_SRC emacs-lisp :colnames t :results silent :comments org
(defun generate-and-run-use-package-declarations (table)
  "Generate and run 'use-package' declarations for packages in the TABLE.
Each row of TABLE should have three columns:
  | Package Name | Package Description | Configuration |

A 'use-package' declaration is only generated for rows where the Configuration
column is non-empty or starts with '[['. The generated forms are also printed
to the `*Messages*` buffer."
  (interactive)
  (message "Extracting package configurations from table:")
  (dolist (row table)
    (let ((pkg-name (car row))
          (pkg-desc (nth 1 row))
          (pkg-config (nth 2 row))
          )
      (message (format "Package: %s - %s" pkg-name pkg-desc))
      (unless (string-prefix-p "[[" pkg-config)
      (let ((use-package-form
             (format "(use-package %s :ensure t %s)"
                     pkg-name
                     (if (or (not pkg-config)                 ; Check if pkg-config is nil
                            (string-empty-p pkg-config))     ; Check if pkg-config is an empty string
                         ""                                   ; Return an empty string
                       (if (string-prefix-p ":" pkg-config)  ; Check if pkg-config starts with ":"
                           pkg-config                        ; Return pkg-config as is
                         (concat ":config " pkg-config)))))) ; Otherwise, prepend ":config " to pkg-config
        (message "%s" use-package-form)  ; Print the constructed form to the *Messages* buffer
        (eval (read use-package-form)))  ; Evaluate the constructed form
      ))))

;; Call the function with the 'package-names' variable
(generate-and-run-use-package-declarations package-names)
#+END_SRC

* Prettify Symbols                                           :Visual:Symbols:
Show pretty symbols for things like lambda, etc
#+NAME: Symbol-Table
| Ugly               | Mode       | Pretty | Reason                      |
|--------------------+------------+--------+-----------------------------|
| forEach            | js         | ∀      | std Math Symbol             |
| for                | js         | ↻     | Looping construct           |
| in                 | js         | ∊      | "element of"                |
| function           | js         | λ      | std gr. lambda              |
| <=                 | js         | ≤      | smaller  or equal           |
| >=                 | js         | ≥      | greater or equal            |
| =>                 | js         | ⤇     | "follows"                   |
| ^=                 | js         | ≙      |                             |
| ==                 | js         | ≡      |                             |
| ===                | js         | ≣      |                             |
| var                | js         | 𝕍     |                             |
| getElementById     | js         | ꖛ     | ⋕                          |
| querySelector      | js         | 𝑸     |                             |
| querySelectorAll   | js         | ℚ      |                             |
| insertAdjacentHTML | js         | @      |                             |
| document           | js         | 𝔻     |                             |
| .parentNode        | js         | ℙ      |                             |
| info               | js         | ⓘ     |                             |
| async              | js         | ⑂      | "fork"                      |
| beforebegin        | js         | ⬑     | "back and up the tag stack" |
| null               | js         | ⦰     | "Empty Set"                 |
| createElement      | js         | Ⓒ     |                             |
| console            | js         | 🖳     |                             |
| .classList         | js         | ℂ      |                             |
| insertBefore       | js         | ⥶     | "Place before tag"          |
| appendChild        | js         | ⥸     | "Place after tag"           |
| while              | js         | ⌛    |                             |
| true               | js         | ①     | True, binary one            |
| false              | js         | ⓪     | False, binary zero          |
| if                 | js         | ⁇     |                             |
| alert              | js         | ⓐ     |                             |
| from               | js         | ↤     |                             |
| +=                 | js         | ⥆     |                             |
| return             | js         | ↲      |                             |
| replace            | js         | ↕      |                             |
| body               | js         | 𝔹     |                             |
| innerText          | js         | 𝕋     |                             |
| innerHTML          | js         | ℍ      |                             |
| dolist             | emacs-lisp | ∀      | see js/forEach              |
| eq                 | emacs-lisp | ≟      |                             |
| setq               | emacs-lisp | ≔      |                             |
| nil                | emacs-lisp | ∅     |                             |
| if                 | emacs-lisp | ⁇     |                             |
| unless             | emacs-lisp | ⁈      |                             |
| not                | emacs-lisp | ¬      |                             |
| defun              | emacs-lisp | 𝔽     |                             |
| define-key         | emacs-lisp | 𝔻     |                             |
| message            | emacs-lisp | 𝕄     |                             |
| :extend            | emacs-lisp | ⭲     | Fill to the right           |
| :background        | emacs-lisp | █      |                             |
| :underline         | emacs-lisp | ▁      |                             |
| :overline          | emacs-lisp | ▔      |                             |
| progn              | emacs-lisp | 𝌆     | List of expressions         |
| require            | emacs-lisp | ℝ      |                             |
| kbd                | emacs-lisp | 𝕂     |                             |
| and                | emacs-lisp | ∧      |                             |
| add-hook           | emacs-lisp | ℍ      |                             |
| \#+BEGIN_SRC        | org        | ✎      |                             |
| \#+END_SRC          | org        | ⮴     |                             |
| :var               | org        | 𝕍     |                             |
| #+NAME:            | org        | ℕ      |                             |
| #+RESULTS:         | org        | ℝ      |                             |
| #+HEADER:          | org        | ▶     |                             |
| defun              | Unused     | 𝕗      |                             |
| defun              | Unused     | Ⓕ     |                             |
| add-hook           | Unused     | Ⓗ     |                             |
| define-key         | Unused     | Ⓓ     |                             |
| for                | python     | ↻     |                             |
| in                 | python     | ∊      |                             |

#+BEGIN_SRC emacs-lisp
(setq-default prettify-symbols-unprettify-at-point t)
(global-prettify-symbols-mode)

;; Block for resetting the hooks while testing:
;;(setq emacs-lisp-mode-hook nil)
;;(setq js-mode-hook nil)
;;(setq python-mode-hook nil)
#+END_SRC

#+NAME: Make-Pretty-Pairs
#+HEADER: :var symbol-table=Symbol-Table
#+BEGIN_SRC emacs-lisp
(let ((language-hooks (make-hash-table :test 'equal)))
  ;; Process each row to group symbols by language, skipping 'unused
  (dolist (row symbol-table)
    (let* ((ugly (nth 0 row))
           (modes (split-string (nth 1 row) " ")) ; Split modes by space
           (pretty (nth 2 row))
           (entry (format "(\"%s\" . ?%s)" ugly pretty)))
      (dolist (mode modes) ; Process each mode
        (unless (string= mode "unused") ; Skip entries with mode "unused"
          (let ((hook-symbol (intern (concat mode "-mode-hook"))))
            (puthash hook-symbol
                     (cons entry (gethash hook-symbol language-hooks))
                     language-hooks))))))
  ;; Generate, message, and evaluate the hooks
  (maphash
   (lambda (hook-symbol entries)
     (let ((hook-code
            (format "(add-hook '%s
  (lambda () (mapc (lambda (pair) (push pair prettify-symbols-alist))
    '(%s))))"
                    hook-symbol
                    (string-join (reverse entries) "\n      "))))
       (message "%s" hook-code)
       (eval (read hook-code))))
   language-hooks))
#+END_SRC

** TODO make it unprettify at point in SourceCode blocks
Doesnt work yet, until when CodeBlock is opened seperate frame with =C-c C-'=
#+BEGIN_SRC emacs-lisp
;(setq prettify-symbols-unprettify-at-point t)
#+END_SRC

* Some useful default Keys                                             :Keys:
#+NAME: Table_Useful_Keys
| KeyCombo    | KeyMap | Meaning                                        |
|-------------+--------+------------------------------------------------|
| *C-u C-c C-q* |        | Realign all tags                               |
| *C-c C-c*     | org    | Execute function at point, reformat table      |
| *M-Enter*     |        | create new heading at same indent level        |
| *M-ArrowKey*  |        | promote/demote/raise/lower current heading     |
| *C-c C-l*     |        | Create/Edit org mode link                      |
| *C-c C-x*     | org    | Toggle display of entities as UTF-8 characters |
| *C-c /*       | org    | org-sparse-display                             |
| *C-c / m*     | org    | org-sparse-display match by Tag                |
| *M-S-↑→↓←*    | org    | in TableEditor: Remove/add Columns/Lines       |
** TODO Add some more keyboard shortcuts in the usage hint section
